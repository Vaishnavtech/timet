import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';


class Item {
  String live;

  Item({required this.live});

  factory Item.fromJson(Map<String, dynamic> json) {
    return Item(
      live: json['live'],
    );
  }

  Map<String, dynamic> toJson() => {
        'live': live,
      };
}


        
  
  

class FirestoreManagementScreen extends StatefulWidget {
  const FirestoreManagementScreen({Key? key}) : super(key: key);

  @override
  _FirestoreManagementScreenState createState() =>
      _FirestoreManagementScreenState();
}

class _FirestoreManagementScreenState extends State<FirestoreManagementScreen> {
  
  final TextEditingController _liveController = TextEditingController();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String searchTerm = "";

  @override
  void dispose() {
    
    _liveController.dispose();
    super.dispose();
  }

  // Add a new document
  Future<void> _addItem() async {
      final querySnapshot = await FirebaseFirestore.instance
        .collection('liveclass')
        .where('live', isEqualTo: "gtxe")
        .get();

    print(querySnapshot.docs.isEmpty);
    if(querySnapshot.docs.isEmpty){
    try {
      await _firestore.collection('liveclass').add(
            Item(live: _liveController.text).toJson(),
          ); 
          // Assuming 'liveclass' is your collection
      _liveController.clear();
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Item added successfully!'),
      ));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Error adding item: $e'),
      ));
    }
    }
    else
    {
   print("already exits");
    }
  }


Future<void> delete(String out) async
{

  try {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('liveclass')
        .where('live', isEqualTo: out)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      await querySnapshot.docs.first.reference.delete();
      print('Document deleted successfully!');
    } else {
      print('No document found for the specified date.');
    }
  } catch (e) {
    print('Error deleting document: $e');
  }
}
Color? Coloured(String Livematch)
{
  
  if(1>0)
  {
 return Colors.greenAccent;                
  }
  else 
{
  return Colors.redAccent;
 }
 }  


 
 
                 

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Firestore Management"),
      ),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _firestore
                  .collection('liveclass')
                  .snapshots(), // Filter by 'live' field
              builder: (context, snapshot) {
                
                return ListView.builder(
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    final document = snapshot.data!.docs[index];
                    final itemData = document.data() as Map<String, dynamic>;
                    final item = Item.fromJson(itemData);
                        
                    return ListTile(
                      iconColor:Coloured("gtxe"),
                      title: Text(item.live),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () {},
                      ),
                    );
                      
                  },
                
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                TextField(
                  controller: _liveController,
                  decoration: const InputDecoration(labelText: 'Live'),
                ),
                const SizedBox(height: 16),

                ElevatedButton(onPressed:() =>  delete("gtxe"), child: const Text("delete")),
                ElevatedButton(onPressed: _addItem,child: const Text('Add Item'),),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

