import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';


class Item {
  String live;

  Item({required this.live});

  factory Item.fromJson(Map<String, dynamic> json) {
    return Item(
      live: json['live'],
    );
  }

  Map<String, dynamic> toJson() => {
        'live': live,
      };
}

class FirestoreManagementScreen extends StatefulWidget {
  const FirestoreManagementScreen({Key? key}) : super(key: key);

  @override
  _FirestoreManagementScreenState createState() =>
      _FirestoreManagementScreenState();
}

class _FirestoreManagementScreenState extends State<FirestoreManagementScreen> {
  
  final TextEditingController _liveController = TextEditingController();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String searchTerm = "";

  @override
  void dispose() {
    
    _liveController.dispose();
    super.dispose();
  }

  // Add a new document
  Future<void> _addItem() async {
    try {
      await _firestore.collection('liveclass').add(
            Item(live: _liveController.text).toJson(),
          ); 
          // Assuming 'liveclass' is your collection
      _liveController.clear();
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Item added successfully!'),
      ));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Error adding item: $e'),
      ));
    }
  }

  // Delete a document by its ID
  Future<void> _deleteItem(String documentId) async {
    try {
      
      await _firestore.collection('liveclass').doc(documentId).delete();
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Item deleted successfully!'),
      ));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Error deleting item: $e'),
      ));
    }
  }

  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Firestore Management"),
      ),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _firestore
                  .collection('liveclass')
                  .where('live', isGreaterThanOrEqualTo: searchTerm)
                  .where('live', isLessThan: searchTerm + 'z')
                  .snapshots(), // Filter by 'live' field
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                }


                return ListView.builder(
                  itemCount: snapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    final document = snapshot.data!.docs[index];
                    final itemData = document.data() as Map<String, dynamic>;
                    final item = Item.fromJson(itemData);
                    Color? method3()
                    {
                     if(item.live =="rtx")
                     {
                      return Colors.greenAccent;
                    
                     }
                     else 
                     {
                     return Colors.redAccent;
                     }
                    }
                    return ListTile(
                      iconColor: method3(),
                      title: Text(item.live),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () => _deleteItem(document.id),
                      ),
                    );
                      
                  },
                
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                TextField(
                  controller: _liveController,
                  decoration: const InputDecoration(labelText: 'Live'),
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  
                  onPressed: _addItem,
                  child: const Text('Add Item'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}